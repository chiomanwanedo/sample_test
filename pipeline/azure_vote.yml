name: vote-pipeline-$(Date:yyyyMMdd)$(Rev:.r)

trigger: none  # This YAML file lives in a separate repo, so we use the repo resource trigger below

resources:
  repositories:
  - repository: app_code
    type: github
    name: chiomanwanedo/example-voting-app
    ref: main
    endpoint: github  # ðŸ‘ˆ your GitHub service connection name
    trigger:
      branches:
        include:
          - main
      paths:
        include:
          - vote/**

variables:
  imageName: vote
  tag: $(Build.BuildId)
  dockerRegistryServiceConnection: 'dockeracr'  # ðŸ‘ˆ replace with your ACR connection name
  containerRegistry: chiomaacr.azurecr.io
  gitUsername: $(GITHUB_USERNAME)   # define in pipeline UI
  gitToken: $(GITHUB_TOKEN)         # define in pipeline UI

stages:
- stage: BuildAndPush
  jobs:
  - job: Build
    pool:
      name: Default  # your self-hosted agent pool
    steps:
    - checkout: app_code  # this checks out the code from example-vote-app repo

    - task: Docker@2
      displayName: Build and Push Docker image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageName)
        command: buildAndPush
        Dockerfile: app_code/vote/Dockerfile
        tags: |
          $(tag)

- stage: UpdateK8sYaml
  dependsOn: BuildAndPush
  jobs:
  - job: PatchYAML
    pool:
      name: Default
    steps:
    - task: Bash@3
      inputs:
        targetType: inline
        script: |
          git config --global user.email "chiomavanessa8@gmail.com"
          git config --global user.name "$(gitUsername)"

          git clone https://$(gitUsername):$(gitToken)@github.com/chiomanwanedo/k8s-specifications.git
          cd k8s-specifications

          echo "ðŸ”§ Patching vote-deployment.yaml with new image tag..."
          sed -i "s|image: .*/vote:.*|image: $(containerRegistry)/vote:$(tag)|" vote-deployment.yaml

          git add vote-deployment.yaml
          git commit -m "Update vote image to :$(tag) [skip ci]"
          git push
